### Default (baseline) configuration parameters.
### DO NOT ever change this config, use -c commandline option instead!

# Note that this file is YAML, so YAML types can be used here, see http://yaml.org/type/
# For instance, large number can be specified as "10_000_000" or "!!float 10e6".


storage:

  # Either path string or a list of absolute paths to scrub/check.
  # Paths are scrubbed recursively, symlinks are not followed.
  # See also "xdev" option below.
  path: # example: /srv/my-data-path

  metadata:
    # Path to persistent db (sqlite) of file hashes and metadata, required
    db: # example: /var/lib/fs_bitrot_scrubber.sqlite
    # Path to store parity/integrity-check data for the hashes/metadata db above
    # Should provide strong guarantee that integrity data itself won't get corrupted.
    # If empty (null), will be stored in the same path as "db" above, with ".check" filename suffix.
    # If set to "false", no parity data will be stored/checked.
    db_parity: false # example: /var/lib/fs_bitrot_scrubber.sqlite.check

  # Do not cross filesystem boundaries.
  # This option is useful to skip transient network mounts (like nfs, sshfs, curlftpfs,
  #  davfs2, etc), having limited list of known-to-be-local mounts specified explicitly.
  # To descent into some filesystems with this option enabled,
  #  just specify their mountpoint paths in "path" secton above.
  xdev: true

  filter:
    # Exclude/include string-patterns (python regexps)
    #  to match canonical absolute paths (realpath) to scrub.
    # Must start with '+' or '-', to include or exclude path, respectively.
    # Patterns are matched against each path in order they're listed here.
    # Leaf directories are matched with the trailing slash
    #  (as with rsync) to be distinguishable from files with the same name.
    # If path doesn't match any regexp on the list (or list is empty), it will be included.
    #
    # Examples:
    #  - '+^/srv/video/($|family/)' # check/scrub all files in specified absolute path
    #  - '-^/srv/video/'            # *don't* check any other videos there
    #  - '-^/srv/images/cat-gifs/'  # there's plenty of these on the internets
    #  - '-(?i)\.(mp3|ogg)$'        # skip mp3/ogg files in any path, unless included above


operation:
  # Name of the hash/checksum algo to use.
  # Must be available in python hashlib module - either as attr or via hashlib.new().
  # Metadata-db must be completely rebuilt from scratch on any change here.
  checksum: sha256

  # Size of a block to read/hash from files.
  # Higher - faster, but needs more RAM and makes
  #  rate-limiting less granular (long read, long delay, ...).
  # Has performance impact only up to about 1 MiB here.
  read_block: 2_000_000 # ~2 MiB

  # Ignore files that change during checksumming for a specified period of time (in hours, float).
  skip_for_hours: 3

  # Rate limiting might be useful to avoid excessive cpu/disk usage.
  # Format of each value is "interval[:burst]", where "interval" can be specified as rate (e.g. "1/3e5").
  # Simple token bucket algorithm is used. Empty values mean "no limit".
  # Examples:
  #   "scan: 1/10:50" - 10 files per second, up to 50 at once (if rate was lower before).
  #   "scan: 0.1:50" - same as above.
  #   "scan: 10:20" - 1 file in 10 seconds, up to 20 at once.
  #   "scan: 5" - interval between file scans = 5 seconds.
  #   "read: 1/3e6:50e6" - 3 MB/s max, up to 50 MB/s.
  rate_limit:
    scan: # limit on rate at which files are scanned on fs, example: 10:50
    read: # hard-limit on rate of bytes read from files, example: 1/3e5:20e6


logging: # see http://docs.python.org/library/logging.config.html
  # "custom" level means WARNING or DEBUG, depending on CLI options
  warnings: true # capture python warnings
  sql_queries: false # log executed sqlite queries (really noisy)

  version: 1
  formatters:
    basic:
      format: '%(asctime)s :: %(name)s :: %(levelname)s: %(message)s'
      datefmt: '%Y-%m-%d %H:%M:%S'
  handlers:
    console:
      class: logging.StreamHandler
      stream: ext://sys.stderr
      formatter: basic
      level: custom
    # debug_logfile:
    #   class: logging.handlers.RotatingFileHandler
    #   filename: /var/log/fs_scrub_debug.log
    #   formatter: basic
    #   encoding: utf-8
    #   maxBytes: 5242880 # 5 MiB
    #   backupCount: 2
    #   level: DEBUG
  # loggers:
  #   bitrot_scrubber.MetaDB:
  #     handlers: [console]
  #     level: 0
  root:
    level: custom
    handlers: [console]
